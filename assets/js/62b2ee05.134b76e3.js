"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6094],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>v});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=d(n),u=i,v=m["".concat(s,".").concat(u)]||m[u]||p[u]||a;return n?r.createElement(v,l(l({ref:t},c),{},{components:n})):r.createElement(v,l({ref:t},c))}));function v(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,l=new Array(a);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:i,l[1]=o;for(var d=2;d<a;d++)l[d]=n[d];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7763:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var r=n(7462),i=(n(7294),n(3905));const a={title:"CoreService"},l=void 0,o={unversionedId:"reference/coreservice",id:"reference/coreservice",title:"CoreService",description:"CoreService provides an interface for implementing custom methods in Jan.",source:"@site/docs/reference/02_coreservice.md",sourceDirName:"reference",slug:"/reference/coreservice",permalink:"/reference/coreservice",draft:!1,editUrl:"https://github.com/janhq/jan/tree/main/docs/docs/reference/02_coreservice.md",tags:[],version:"current",lastUpdatedBy:"Daniel",lastUpdatedAt:1699188978,formattedLastUpdatedAt:"Nov 5, 2023",sidebarPosition:2,frontMatter:{title:"CoreService"},sidebar:"devSidebar",previous:{title:"init",permalink:"/reference/init"},next:{title:"events",permalink:"/reference/events"}},s={},d=[{value:"Usage",id:"usage",level:2},{value:"CoreService",id:"coreservice",level:2},{value:"StoreService",id:"storeservice",level:2},{value:"DataService",id:"dataservice",level:2},{value:"InferenceService",id:"inferenceservice",level:2},{value:"ModelManagementService",id:"modelmanagementservice",level:2},{value:"PreferenceService",id:"preferenceservice",level:2},{value:"SystemMonitoringService",id:"systemmonitoringservice",level:2},{value:"PluginService",id:"pluginservice",level:2}],c={toc:d},m="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"CoreService")," provides an interface for implementing custom methods in Jan.\nIt lets you define shared behavior across your custom application, like how your app handles state, models, or inferencing behavior."),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { CoreService, ... } from "@janhq/core";\n')),(0,i.kt)("h2",{id:"coreservice"},"CoreService"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"CoreService")," type bundles the following services:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"StoreService")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"DataService")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"InferenceService")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ModelManagementService")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"SystemMonitoringService")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"PreferenceService"))),(0,i.kt)("h2",{id:"storeservice"},"StoreService"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"StoreService")," enum represents available methods for managing the database store. It includes the following methods:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"CreateCollection"),": Creates a new collection in the data store."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"DeleteCollection"),": Deletes an existing collection from the data store."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"InsertOne"),": Inserts a new value into an existing collection in the data store."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"UpdateOne"),": Updates an existing value in an existing collection in the data store."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"UpdateMany"),": Updates multiple records in a collection in the data store."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"DeleteOne"),": Deletes an existing value from an existing collection in the data store."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"DeleteMany"),": Deletes multiple records in a collection in the data store."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"FindMany"),": Retrieves multiple records from a collection in the data store."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"FindOne"),": Retrieves a single record from a collection in the data store.")),(0,i.kt)("h2",{id:"dataservice"},"DataService"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"DataService")," enum represents methods related to managing conversations and messages. It includes the following methods:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GetConversations"),": Gets a list of conversations from the data store."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"CreateConversation"),": Creates a new conversation in the data store."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"DeleteConversation"),": Deletes an existing conversation from the data store."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"CreateMessage"),": Creates a new message in an existing conversation in the data store."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"UpdateMessage"),": Updates an existing message in an existing conversation in the data store."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GetConversationMessages"),": Gets a list of messages for an existing conversation from the data store.")),(0,i.kt)("h2",{id:"inferenceservice"},"InferenceService"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"InferenceService")," enum exports:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"InitModel"),": Initializes a model for inference."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"StopModel"),": Stops a running inference model.")),(0,i.kt)("h2",{id:"modelmanagementservice"},"ModelManagementService"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ModelManagementService")," enum provides methods for managing models:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GetDownloadedModels"),": Gets a list of downloaded models."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GetAvailableModels"),": Gets a list of available models from data store."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"DeleteModel"),": Deletes a downloaded model."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"DownloadModel"),": Downloads a model from the server."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"SearchModels"),": Searches for models on the server."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GetConfiguredModels"),": Gets configured models from the data store."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"StoreModel"),": Stores a model in the data store."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"UpdateFinishedDownloadAt"),": Updates the finished download time for a model in the data store."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GetUnfinishedDownloadModels"),": Gets a list of unfinished download models from the data store."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GetFinishedDownloadModels"),": Gets a list of finished download models from the data store."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"DeleteDownloadModel"),": Deletes a downloaded model from the data store."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GetModelById"),": Gets a model by its ID from the data store.")),(0,i.kt)("h2",{id:"preferenceservice"},"PreferenceService"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"PreferenceService")," enum provides methods for managing plugin preferences:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ExperimentComponent"),": Represents the UI experiment component for a testing function.")),(0,i.kt)("h2",{id:"systemmonitoringservice"},"SystemMonitoringService"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"SystemMonitoringService")," enum includes methods for monitoring system resources:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GetResourcesInfo"),": Gets information about system resources."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GetCurrentLoad"),": Gets the current system load.")),(0,i.kt)("h2",{id:"pluginservice"},"PluginService"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"PluginService")," enum includes plugin cycle handlers:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"OnStart"),": Handler for starting. E.g. Create a collection."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"OnPreferencesUpdate"),": Handler for preferences update. E.g. Update instances with new configurations.")),(0,i.kt)("p",null,"For more detailed information on each of these components, please refer to the source code."))}p.isMDXComponent=!0}}]);