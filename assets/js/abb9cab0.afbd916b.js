"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9300],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),d=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=d(a),u=r,h=c["".concat(l,".").concat(u)]||c[u]||m[u]||s;return a?n.createElement(h,o(o({ref:t},p),{},{components:a})):n.createElement(h,o({ref:t},p))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,o=new Array(s);o[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:r,o[1]=i;for(var d=2;d<s;d++)o[d]=a[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},13978:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var n=a(87462),r=(a(67294),a(3905));const s={title:"Threads"},o=void 0,i={unversionedId:"specs/threads",id:"specs/threads",title:"Threads",description:"This is currently under development.",source:"@site/docs/specs/threads.md",sourceDirName:"specs",slug:"/specs/threads",permalink:"/specs/threads",draft:!1,editUrl:"https://github.com/janhq/jan/tree/main/docs/docs/specs/threads.md",tags:[],version:"current",lastUpdatedBy:"hiento09",lastUpdatedAt:1700726165,formattedLastUpdatedAt:"Nov 23, 2023",frontMatter:{title:"Threads"},sidebar:"docsSidebar",previous:{title:"Models",permalink:"/specs/models"},next:{title:"Messages",permalink:"/specs/messages"}},l={},d=[{value:"Overview",id:"overview",level:2},{value:"Folder Structure",id:"folder-structure",level:2},{value:"<code>thread.json</code>",id:"threadjson",level:2},{value:"Example",id:"example",level:3},{value:"API Reference",id:"api-reference",level:2}],p={toc:d},c="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"This is currently under development.")),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Threads")," are conversations between an ",(0,r.kt)("inlineCode",{parentName:"p"},"assistant")," and the user:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Users can tweak ",(0,r.kt)("inlineCode",{parentName:"li"},"model")," params and ",(0,r.kt)("inlineCode",{parentName:"li"},"assistant")," behavior within each thread."),(0,r.kt)("li",{parentName:"ul"},"Users can import and export threads."),(0,r.kt)("li",{parentName:"ul"},"An ",(0,r.kt)("a",{parentName:"li",href:"https://platform.openai.com/docs/api-reference/threads"},"OpenAI Thread API")," compatible endpoint at ",(0,r.kt)("inlineCode",{parentName:"li"},"localhost:3000/v1/threads"),".")),(0,r.kt)("h2",{id:"folder-structure"},"Folder Structure"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Threads are saved in the ",(0,r.kt)("inlineCode",{parentName:"li"},"/threads")," folder."),(0,r.kt)("li",{parentName:"ul"},"Threads are organized by folders, one for each thread, and can be easily zipped, exported, and cleared."),(0,r.kt)("li",{parentName:"ul"},"Thread folders follow the naming: ",(0,r.kt)("inlineCode",{parentName:"li"},"assistant_id")," + ",(0,r.kt)("inlineCode",{parentName:"li"},"thread_created_at"),"."),(0,r.kt)("li",{parentName:"ul"},"Thread folders also contain ",(0,r.kt)("inlineCode",{parentName:"li"},"messages.jsonl")," files. See ",(0,r.kt)("a",{parentName:"li",href:"/specs/messages"},"messages"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"jan/\n    threads/\n        assistant_name_unix_timestamp/\n            thread.json\n            messages.jsonl\n        jan_2341243134/\n            thread.json\n")),(0,r.kt)("h2",{id:"threadjson"},(0,r.kt)("inlineCode",{parentName:"h2"},"thread.json")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Each ",(0,r.kt)("inlineCode",{parentName:"li"},"thread")," folder contains a ",(0,r.kt)("inlineCode",{parentName:"li"},"thread.json")," file, which is a representation of a thread."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"thread.json")," contains metadata and model parameter overrides."),(0,r.kt)("li",{parentName:"ul"},"There are no required fields.")),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("p",null,"Here's a standard example ",(0,r.kt)("inlineCode",{parentName:"p"},"thread.json")," for a conversation between the user and the default Jan assistant."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'"id": "thread_....",                  // Defaults to foldername\n"object": "thread",                   // Defaults to "thread"\n"title": "funny physics joke",        // Defaults to ""\n"assistants": [\n  {\n    "assistant_id": "jan",            // Defaults to "jan"\n    "model": {                        // Defaults to 1 currently active model (can be changed before thread is begun)\n      "settings": {},                 // Defaults to and overrides assistant.json\'s "settings" (and if none, then model.json "settings")\n      "parameters": {},               // Defaults to and overrides assistant.json\'s "parameters" (and if none, then model.json "parameters")\n    }\n  },\n],\n"created": 1231231                    // Defaults to file creation time\n"metadata": {},                       // Defaults to {}\n')),(0,r.kt)("h2",{id:"api-reference"},"API Reference"),(0,r.kt)("p",null,"Jan's Threads API is compatible with ",(0,r.kt)("a",{parentName:"p",href:"https://platform.openai.com/docs/api-reference/threads"},"OpenAI's Threads API"),", with additional methods for managing threads locally."),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"https://jan.ai/api-reference#tag/Threads"},"Jan Threads API")))}m.isMDXComponent=!0}}]);