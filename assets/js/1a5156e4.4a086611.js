"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9454],{3905:(e,r,n)=>{n.d(r,{Zo:()=>l,kt:()=>d});var t=n(7294);function i(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function c(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){i(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function s(e,r){if(null==e)return{};var n,t,i=function(e,r){if(null==e)return{};var n,t,i={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(i[n]=e[n]);return i}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=t.createContext({}),p=function(e){var r=t.useContext(o),n=r;return e&&(n="function"==typeof e?e(r):c(c({},r),e)),n},l=function(e){var r=p(e.components);return t.createElement(o.Provider,{value:r},e.children)},f="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},g=t.forwardRef((function(e,r){var n=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),f=p(n),g=i,d=f["".concat(o,".").concat(g)]||f[g]||u[g]||a;return n?t.createElement(d,c(c({ref:r},l),{},{components:n})):t.createElement(d,c({ref:r},l))}));function d(e,r){var n=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var a=n.length,c=new Array(a);c[0]=g;var s={};for(var o in r)hasOwnProperty.call(r,o)&&(s[o]=r[o]);s.originalType=e,s[f]="string"==typeof e?e:i,c[1]=s;for(var p=2;p<a;p++)c[p]=n[p];return t.createElement.apply(null,c)}return t.createElement.apply(null,n)}g.displayName="MDXCreateElement"},7173:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var t=n(7462),i=(n(7294),n(3905));const a={title:"preferences"},c=void 0,s={unversionedId:"reference/preferences",id:"reference/preferences",title:"preferences",description:"preferences is a helper object for adding settings fields to your app.",source:"@site/docs/reference/06_preferences.md",sourceDirName:"reference",slug:"/reference/preferences",permalink:"/reference/preferences",draft:!1,editUrl:"https://github.com/janhq/jan/tree/main/docs/docs/reference/06_preferences.md",tags:[],version:"current",lastUpdatedBy:"Daniel",lastUpdatedAt:1699197569,formattedLastUpdatedAt:"Nov 5, 2023",sidebarPosition:6,frontMatter:{title:"preferences"},sidebar:"devSidebar",previous:{title:"filesystem",permalink:"/reference/filesystem"}},o={},p=[{value:"Usage",id:"usage",level:2},{value:"registerPreferences",id:"registerpreferences",level:2},{value:"get",id:"get",level:2},{value:"set",id:"set",level:2},{value:"clear",id:"clear",level:2}],l={toc:p},f="wrapper";function u(e){let{components:r,...n}=e;return(0,i.kt)(f,(0,t.Z)({},l,n,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"preferences")," is a helper object for adding settings fields to your app."),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"To register plugin preferences, you can use the preferences object from the @janhq/core package. Here's an example of how to register and retrieve plugin preferences:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { PluginService, preferences } from "@janhq/core";\n\nconst pluginName = "your-first-plugin";\nconst preferenceKey = "";\nconst preferenceName = "Your First Preference";\nconst preferenceDescription = "This is for example only";\nconst defaultValue = "";\n\nexport function init({ register }: { register: RegisterExtensionPoint }) {\n  // Register preference update handlers. E.g. update plugin instance with new configuration\n  register(PluginService.OnPreferencesUpdate, pluginName, onPreferencesUpdate);\n\n  // Register plugin preferences. E.g. Plugin need apiKey to connect to your service\n  preferences.registerPreferences <\n    string >\n    (register,\n    pluginName,\n    preferenceKey,\n    preferenceName,\n    preferenceDescription,\n    defaultValue);\n}\n')),(0,i.kt)("p",null,"In this example, we're registering preference update handlers and plugin preferences using the preferences object. We're also defining a PluginName constant to use as the name of the plugin."),(0,i.kt)("p",null,"To retrieve the values of the registered preferences, we're using the get method of the preferences object and passing in the name of the plugin and the name of the preference."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { preferences } from "@janhq/core";\n\nconst pluginName = "your-first-plugin";\nconst preferenceKey = "apiKey";\n\nconst setup = async () => {\n  // Retrieve apiKey\n  const apiKey: string =\n    (await preferences.get(pluginName, preferenceKey)) ?? "";\n};\n')),(0,i.kt)("h2",{id:"registerpreferences"},"registerPreferences"),(0,i.kt)("h2",{id:"get"},"get"),(0,i.kt)("h2",{id:"set"},"set"),(0,i.kt)("h2",{id:"clear"},"clear"))}u.isMDXComponent=!0}}]);