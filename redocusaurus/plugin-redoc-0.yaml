openapi: 3.0.0
info:
  title: API Reference
  description: >
    # Introduction

    Jan API is compatible with the [OpenAI
    API](https://platform.openai.com/docs/api-reference).
version: 0.1.8
contact:
  name: Jan Discord
  url: https://discord.gg/7EcEz7MrvA
license:
  name: AGPLv3
  url: https://github.com/janhq/nitro/blob/main/LICENSE
servers:
  - url: https://localhost:1337/v1/
tags:
  - name: Models
    description: List and describe the various models available in the API.
  - name: Chat
    description: >
      Given a list of messages comprising a conversation, the model will return
      a response.
  - name: Messages
    description: >
      Messages capture a conversation's content. This can include the content
      from LLM responses and other metadata from [chat
      completions](/specs/chats).
  - name: Threads
  - name: Assistants
    description: Configures and utilizes different AI assistants for varied tasks
x-tagGroups:
  - name: Endpoints
    tags:
      - Models
      - Chat
  - name: Chat
    tags:
      - Assistants
      - Messages
      - Threads
paths:
  /chat/completions:
    post:
      operationId: createChatCompletion
      tags:
        - Chat
      summary: |
        Create chat completion
      description: >
        Creates a model response for the given chat conversation.  <a  href =
        "https://platform.openai.com/docs/api-reference/chat/create"> Equivalent
        to OpenAI's create chat completion. </a>
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCompletionRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCompletionResponse'
      x-codeSamples:
        - lang: curl
          source: >
            curl -X POST
            'http://localhost:3982/inferences/llamacpp/chat_completion' \
                  -H "Content-Type: application/json" \
                  -d '{
                    "llama_model_path": "/path/to/your/model.gguf",
                    "messages": [
                      {
                        "role": "user",
                        "content": "hello"
                      },
                    ]
                  }'
  /models:
    get:
      operationId: listModels
      tags:
        - Models
      summary: List models
      description: >
        Lists the currently available models, and provides basic information
        about each one such as the owner and availability.  <a  href =
        "https://platform.openai.com/docs/api-reference/models/list"> Equivalent
        to OpenAI's list model. </a>
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListModelsResponse'
      x-codeSamples:
        - lang: curl
          source: |
            curl https://localhost:1337/v1/models
    post:
      operationId: downloadModel
      tags:
        - Models
      summary: Download model
      description: |
        Download a model.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DownloadModelResponse'
      x-codeSamples:
        - lang: curl
          source: |
            curl -X POST https://localhost:1337/v1/models
  /models/{model_id}:
    get:
      operationId: retrieveModel
      tags:
        - Models
      summary: Retrieve model
      description: >
        Get a model instance, providing basic information about the model such
        as the owner and permissioning.  <a  href =
        "https://platform.openai.com/docs/api-reference/models/retrieve">
        Equivalent to OpenAI's retrieve model. </a>
      parameters:
        - in: path
          name: model_id
          required: true
          schema:
            type: string
            example: zephyr-7b
          description: |
            The ID of the model to use for this request
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetModelResponse'
      x-codeSamples:
        - lang: curl
          source: |
            curl https://localhost:1337/v1/models/zephyr-7b
    delete:
      operationId: deleteModel
      tags:
        - Models
      summary: Delete model
      description: >
        Delete a model. <a  href =
        "https://platform.openai.com/docs/api-reference/models/delete">
        Equivalent to OpenAI's delete model. </a>
      parameters:
        - in: path
          name: model
          required: true
          schema:
            type: string
            example: zephyr-7b
          description: |
            The model to delete
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteModelResponse'
      x-codeSamples:
        - lang: curl
          source: |
            curl -X DELETE https://localhost:1337/v1/models/zephyr-7b      
  /models/{model_id}/start:
    put:
      operationId: startModel
      tags:
        - Models
      summary: Start model
      description: |
        Starts an imported model. Loads the model into V/RAM.
      parameters:
        - in: path
          name: model
          required: true
          schema:
            type: string
            example: zephyr-7b
          description: |
            The ID of the model to use for this request
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartModelResponse'
      x-codeSamples:
        - lang: curl
          source: |
            curl -X PUT https://localhost:1337/v1/models/zephyr-7b/start      
  /models/{model_id}/stop:
    put:
      operationId: stopModel
      tags:
        - Models
      summary: Stop model
      description: |
        Stop an imported model.
      parameters:
        - in: path
          name: model
          required: true
          schema:
            type: string
            example: zephyr-7b
          description: The ID of the model to use for this request
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StopModelResponse'
      x-codeSamples:
        - lang: curl
          source: |
            curl -X PUT https://localhost:1337/v1/models/zephyr-7b/stop
  /threads:
    post:
      operationId: createThread
      tags:
        - Threads
      summary: Create thread
      description: >
        Create a thread.  <a  href =
        "https://platform.openai.com/docs/api-reference/threads/createThread">
        Equivalent to OpenAI's create thread. </a>
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                messages:
                  type: array
                  description: Initial set of messages for the thread.
                  items:
                    $ref: '#/components/schemas/ThreadMessageObject'
      responses:
        '200':
          description: Thread created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateThreadResponse'
      x-codeSamples:
        - lang: cURL
          source: |
            curl -X POST http://localhost:1337/v1/threads \
              -H "Content-Type: application/json" \
              -d '{
                  "messages": [{
                      "role": "user",
                      "content": "Hello, what is AI?",
                      "file_ids": ["file-abc123"]
                  }, {
                      "role": "user",
                      "content": "How does AI work? Explain it in simple terms."
                  }]
              }'    
    get:
      operationId: listThreads
      tags:
        - Threads
      summary: List threads
      description: |
        Retrieves a list of all threads available in the system.
      responses:
        '200':
          description: List of threads retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ThreadObject'
                example:
                  - id: thread_abc123
                    object: thread
                    created_at: 1699014083
                    assistants:
                      - assistant-001
                    metadata: {}
                    messages: []
                  - id: thread_abc456
                    object: thread
                    created_at: 1699014083
                    assistants:
                      - assistant-002
                      - assistant-003
                    metadata: {}
      x-codeSamples:
        - lang: curl
          source: |
            curl http://localhost:1337/v1/threads \
              -H "Content-Type: application/json" \
  /threads/{thread_id}:
    get:
      operationId: getThread
      tags:
        - Threads
      summary: Retrieve thread
      description: >
        Retrieves detailed information about a specific thread using its
        thread_id.  <a  href =
        "https://platform.openai.com/docs/api-reference/threads/getThread">
        Equivalent to OpenAI's retrieve thread. </a>
      parameters:
        - in: path
          name: thread_id
          required: true
          schema:
            type: string
            example: thread_abc123
          description: |
            The ID of the thread to retrieve.
      responses:
        '200':
          description: Thread details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetThreadResponse'
      x-codeSamples:
        - lang: curl
          source: |
            curl http://localhost:1337/v1/threads/{thread_id}
    post:
      operationId: modifyThread
      tags:
        - Threads
      summary: Modify thread
      description: >
        Modifies a thread.  <a  href =
        "https://platform.openai.com/docs/api-reference/threads/modifyThread">
        Equivalent to OpenAI's modify thread. </a>
      parameters:
        - in: path
          name: thread_id
          required: true
          schema:
            type: string
            example: thread_abc123
          description: |
            The ID of the thread to be modified.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                messages:
                  type: array
                  description: Set of messages to update in the thread.
                  items:
                    $ref: '#/components/schemas/ThreadMessageObject'
      responses:
        '200':
          description: Thread modified successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModifyThreadResponse'
      x-codeSamples:
        - lang: curl
          source: |
            curl -X POST http://localhost:1337/v1/threads/{thread_id} \
              -H "Content-Type: application/json" \
              -d '{
                  "messages": [{
                      "role": "user",
                      "content": "Hello, what is AI?",
                      "file_ids": ["file-abc123"]
                  }, {
                      "role": "user",
                      "content": "How does AI work? Explain it in simple terms."
                  }]
              }'
    delete:
      operationId: deleteThread
      tags:
        - Threads
      summary: Delete thread
      description: >
        Delete a thread.  <a  href =
        "https://platform.openai.com/docs/api-reference/threads/deleteThread">
        Equivalent to OpenAI's delete thread. </a>
      parameters:
        - in: path
          name: thread_id
          required: true
          schema:
            type: string
            example: thread_abc123
          description: |
            The ID of the thread to be deleted.
      responses:
        '200':
          description: Thread deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteThreadResponse'
      x-codeSamples:
        - lang: curl
          source: |
            curl -X DELETE http://localhost:1337/v1/threads/{thread_id}
  /threads/{thread_id}/assistants:
    get:
      operationId: getThreadAssistants
      tags:
        - Threads
      summary: Get Thread.Assistants
      description: |
        Can achieve this goal by calling Get thread API
      parameters:
        - in: path
          name: thread_id
          required: true
          schema:
            type: string
            example: thread_abc123
          description: The ID of the thread to retrieve.
      responses:
        '200':
          description: Thread details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetThreadResponse'
      x-codeSamples:
        - lang: curl
          source: |
            curl http://localhost:1337/v1/threads/{thread_id}/assistants
  /threads/{thread_id}/assistants/{assistants_id}:
    post:
      operationId: postThreadAssistants
      tags:
        - Threads
      summary: Modify Thread.Assistants
      description: >


        Can achieve this goal by calling Modify Assistant API with
        thread.assistant[]
  /threads/{thread_id}/:
    get:
      operationId: listThreadMessage
      tags:
        - Threads
      summary: List Thread.Messages
      description: |
        Can achieve this goal by calling Get Thread API
      parameters:
        - in: path
          name: thread_id
          required: true
          schema:
            type: string
            example: thread_abc123
          description: The ID of the thread to retrieve.
      responses:
        '200':
          description: Thread details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetThreadResponse'
      x-codeSamples:
        - lang: curl
          source: |
            curl http://localhost:1337/v1/threads/{thread_id}
  /threads/{thread_id}/messages:
    get:
      operationId: listMessages
      tags:
        - Messages
      summary: List messages
      description: >
        Retrieves all messages from the given thread. <a  href =
        "https://platform.openai.com/docs/api-reference/messages/listMessages">
        Equivalent to OpenAI's list messages. </a>
      parameters:
        - in: path
          name: thread_id
          required: true
          schema:
            type: string
            example: thread_abc123
          description: |
            The ID of the thread from which to retrieve messages.
      responses:
        '200':
          description: List of messages retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMessagesResponse'
      x-codeSamples:
        - lang: curl
          source: |
            curl http://localhost:1337/v1/threads/{thread_id}/messages \
              -H "Content-Type: application/json"
    post:
      operationId: createMessage
      tags:
        - Messages
      summary: Create message
      description: >
        Create a message. <a  href =
        "https://platform.openai.com/docs/api-reference/messages/createMessage">
        Equivalent to OpenAI's list messages. </a>
      parameters:
        - in: path
          name: thread_id
          required: true
          schema:
            type: string
            example: thread_abc123
          description: |
            The ID of the thread to which the message will be posted.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  description: |
                    "Role of the sender, either 'user' or 'assistant'."

                    <span style="color:#228B22">OpenAI compatible</span>
                  example: user
                  enum:
                    - user
                    - assistant
                content:
                  type: string
                  description: |
                    "Text content of the message."

                    <span style="color:#228B22">OpenAI compatible</span>
                  example: How does AI work? Explain it in simple terms.
              required:
                - role
                - content
      responses:
        '200':
          description: Message created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateMessageResponse'
      x-codeSamples:
        - lang: curl
          source: |
            curl -X POST http://localhost:1337/v1/threads/{thread_id}/messages \
              -H "Content-Type: application/json" \
              -d '{
                "role": "user",
                "content": "How does AI work? Explain it in simple terms."
              }'
  /threads/{thread_id}/messages/{message_id}:
    get:
      operationId: retrieveMessage
      tags:
        - Messages
      summary: Retrieve message
      description: >
        Retrieve a specific message from a thread using its thread_id and
        message_id. <a  href =
        "https://platform.openai.com/docs/api-reference/messages/getMessage">
        Equivalent to OpenAI's retrieve messages. </a>
      parameters:
        - in: path
          name: thread_id
          required: true
          schema:
            type: string
            example: thread_abc123
          description: |
            The ID of the thread containing the message.
        - in: path
          name: message_id
          required: true
          schema:
            type: string
            example: msg_abc123
          description: |
            The ID of the message to retrieve.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMessageResponse'
      x-codeSamples:
        - lang: curl
          source: >
            curl
            http://localhost:1337/v1/threads/{thread_id}/messages/{message_id} \
              -H "Content-Type: application/json"
  /threads/{thread_id}/messages/{message_id}/files:
    get:
      operationId: listMessageFiles
      tags:
        - Messages
      summary: |
        List message files 
      description: >
        Returns a list of message files.  <a  href =
        "https://platform.openai.com/docs/api-reference/messages/listMessageFiles">
        Equivalent to OpenAI's list message files. </a>
      parameters:
        - in: path
          name: thread_id
          required: true
          schema:
            type: string
            example: thread_abc123
          description: |
            The ID of the thread containing the message.
        - in: path
          name: message_id
          required: true
          schema:
            type: string
            example: msg_abc123
          description: |
            The ID of the message whose files are to be listed. 
      responses:
        '200':
          description: List of files retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMessageFilesResponse'
      x-codeSamples:
        - lang: curl
          source: >
            curl
            http://localhost:1337/v1/threads/{thread_id}/messages/{message_id}/files
            \
              -H "Content-Type: application/json"
  /threads/{thread_id}/messages/{message_id}/files/{file_id}:
    get:
      operationId: retrieveMessageFile
      tags:
        - Messages
      summary: Retrieve message file
      description: >
        Retrieves a file associated with a specific message in a thread.  <a 
        href =
        "https://platform.openai.com/docs/api-reference/messages/getMessageFile">
        Equivalent to OpenAI's retrieve message file. </a>
      parameters:
        - in: path
          name: thread_id
          required: true
          schema:
            type: string
            example: thread_abc123
          description: |
            The ID of the thread containing the message.
        - in: path
          name: message_id
          required: true
          schema:
            type: string
            example: msg_abc123
          description: |
            The ID of the message associated with the file.
        - in: path
          name: file_id
          required: true
          schema:
            type: string
            example: file-abc123
          description: |
            The ID of the file to retrieve.
      responses:
        '200':
          description: File retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageFileObject'
      x-codeSamples:
        - lang: curl
          source: >
            curl
            http://localhost:1337/v1/threads/{thread_id}/messages/{message_id}/files/{file_id}
            \
              -H "Content-Type: application/json"
x-webhooks:
  ModelObject:
    post:
      summary: The model object
      description: >
        Describe a model offering that can be used with the API. <a  href =
        "https://platform.openai.com/docs/api-reference/models/object">
        Equivalent to OpenAI's model object. </a>
      operationId: ModelObject
      tags:
        - Models
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelObject'
  MessageObject:
    post:
      summary: The message object
      description: >
        Information about a message in the thread.  <a  href =
        "https://platform.openai.com/docs/api-reference/messages/object">
        Equivalent to OpenAI's message object. </a>
      operationId: MessageObject
      tags:
        - Messages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageObject'
  ThreadObject:
    post:
      summary: The thread object
      description: >-
        Represents a thread that contains messages. <a  href =
        "https://platform.openai.com/docs/api-reference/threads/object">
        Equivalent to OpenAI's thread object. </a>
      operationId: ThreadObject
      tags:
        - Threads
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThreadObject'
components:
  schemas:
    ChatCompletionRequest:
      type: object
      properties:
        messages:
          type: arrays
          description: |
            Contains input data or prompts for the model to process
          example:
            - content: 'Hello there :wave:'
              role: assistant
            - content: Can you write a long story
              role: user
        model:
          type: string
          example: model-zephyr-7B
          description: |
            Specifies the model being used for inference or processing tasks
        stream:
          type: boolean
          default: true
          description: >
            Enables continuous output generation, allowing for streaming of
            model responses
        max_tokens:
          type: number
          default: 2048
          description: >
            The maximum number of tokens the model will generate in a single
            response
        stop:
          type: arrays
          example:
            - hello
          description: >
            Defines specific tokens or phrases at which the model will stop
            generating further output
        frequency_penalty:
          type: number
          default: 0
          description: >
            Adjusts the likelihood of the model repeating words or phrases in
            its output
        presence_penalty:
          type: number
          default: 0
          description: >
            Influences the generation of new and varied concepts in the model's
            output
        temperature:
          type: number
          default: 0.7
          min: 0
          max: 1
          description: |
            Controls the randomness of the model's output
        top_p:
          type: number
          default: 0.95
          min: 0
          max: 1
          description: |
            Set probability threshold for more relevant outputs
    ChatCompletionResponse:
      type: object
      description: Description of the response structure
      properties:
        choices:
          type: array
          description: Array of choice objects
          items:
            type: object
            properties:
              finish_reason:
                type: string
                nullable: true
                example: null
                description: Reason for finishing the response, if applicable
              index:
                type: integer
                example: 0
                description: Index of the choice
              message:
                type: object
                properties:
                  content:
                    type: string
                    example: Hello user. What can I help you with?
                    description: Content of the message
                  role:
                    type: string
                    example: assistant
                    description: Role of the sender
        created:
          type: integer
          example: 1700193928
          description: Timestamp of when the response was created
        id:
          type: string
          example: ebwd2niJvJB1Q2Whyvkz
          description: Unique identifier of the response
        model:
          type: string
          nullable: true
          example: _
          description: Model used for generating the response
        object:
          type: string
          example: chat.completion
          description: Type of the response object
        system_fingerprint:
          type: string
          nullable: true
          example: _
          description: System fingerprint
        usage:
          type: object
          description: Information about the usage of tokens
          properties:
            completion_tokens:
              type: integer
              example: 500
              description: Number of tokens used for completion
            prompt_tokens:
              type: integer
              example: 33
              description: Number of tokens used in the prompt
            total_tokens:
              type: integer
              example: 533
              description: Total number of tokens used
    Model:
      type: object
      properties:
        type:
          type: string
          default: model
          description: The type of the object.
        version:
          type: string
          default: '1'
          description: The version number of the model.
        id:
          type: string
          description: >-
            Unique identifier used in chat-completions model_name, matches
            folder name.
          example: zephyr-7b
        name:
          type: string
          description: Name of the model.
          example: Zephyr 7B
        owned_by:
          type: string
          description: Compatibility field for OpenAI.
          default: ''
        created:
          type: integer
          format: int64
          description: Unix timestamp representing the creation time.
        description:
          type: string
          description: Description of the model.
        state:
          type: string
          enum:
            - null
            - downloading
            - ready
            - starting
            - stopping
          description: Current state of the model.
        format:
          type: string
          description: State format of the model, distinct from the engine.
          example: ggufv3
        source_url:
          type: string
          format: uri
          description: URL to the source of the model.
          example: >-
            https://huggingface.co/TheBloke/zephyr-7B-beta-GGUF/blob/main/zephyr-7b-beta.Q4_K_M.gguf
        settings:
          type: object
          properties:
            ctx_len:
              type: string
              description: Context length.
              example: '2048'
            ngl:
              type: string
              description: Number of layers.
              example: '100'
            embedding:
              type: string
              description: Indicates if embedding is enabled.
              example: 'true'
            n_parallel:
              type: string
              description: Number of parallel processes.
              example: '4'
          additionalProperties: false
        parameters:
          type: object
          properties:
            temperature:
              type: string
              description: Temperature setting for the model.
              example: '0.7'
            token_limit:
              type: string
              description: Token limit for the model.
              example: '2048'
            top_k:
              type: string
              description: Top-k setting for the model.
              example: '0'
            top_p:
              type: string
              description: Top-p setting for the model.
              example: '1'
            stream:
              type: string
              description: Indicates if streaming is enabled.
              example: 'true'
          additionalProperties: false
        metadata:
          type: object
          description: Additional metadata.
        assets:
          type: array
          items:
            type: string
          description: List of assets related to the model.
      required:
        - source_url
    ListModelsResponse:
      type: object
      properties:
        object:
          type: string
          enum:
            - list
        data:
          type: array
          items:
            $ref: '#/components/schemas/Model'
      required:
        - object
        - data
    DownloadModelResponse:
      type: object
      properties:
        id:
          type: string
          description: The identifier of the model that was started.
          example: model-zephyr-7B
        object:
          type: string
          description: Type of the object, indicating it's a model.
          default: model
        state:
          type: string
          description: The current state of the model after the start operation.
          example: downloaded
    GetModelResponse:
      type: object
      properties:
        id:
          type: string
          description: The identifier of the model.
          example: zephyr-7b
        object:
          type: string
          description: Type of the object, indicating it's a model.
          default: model
        created:
          type: integer
          format: int64
          description: Unix timestamp representing the creation time of the model.
        owned_by:
          type: string
          description: The entity that owns the model.
          example: _
        state:
          type: string
          enum:
            - not_downloaded
            - downloaded
            - running
            - stopped
          description: The current state of the model.
        source_url:
          type: string
          format: uri
          description: URL to the source of the model.
          example: >-
            https://huggingface.co/TheBloke/zephyr-7B-beta-GGUF/blob/main/zephyr-7b-beta.Q4_K_M.gguf
        parameters:
          type: object
          properties:
            ctx_len:
              type: integer
              description: Context length.
              example: 2048
            ngl:
              type: integer
              description: Number of layers.
              example: 100
            embedding:
              type: boolean
              description: Indicates if embedding is enabled.
              example: true
            n_parallel:
              type: integer
              description: Number of parallel processes.
              example: 4
            temperature:
              type: string
              description: Temperature setting for the model.
              example: '0.7'
            token_limit:
              type: string
              description: Token limit for the model.
              example: '2048'
            top_k:
              type: string
              description: Top-k setting for the model.
              example: '0'
            top_p:
              type: string
              description: Top-p setting for the model.
              example: '1'
        metadata:
          type: object
          properties:
            engine:
              type: string
              description: The engine used by the model.
              example: llamacpp
            quantization:
              type: string
              description: Quantization parameter of the model.
              example: Q3_K_L
            size:
              type: string
              description: Size of the model.
              example: 7B
      required:
        - id
        - object
        - created
        - owned_by
        - state
        - source_url
        - parameters
        - metadata
    DeleteModelResponse:
      type: object
      properties:
        id:
          type: string
          description: The identifier of the model that was deleted.
          example: model-zephyr-7B
        object:
          type: string
          description: Type of the object, indicating it's a model.
          default: model
        deleted:
          type: boolean
          description: Indicates whether the model was successfully deleted.
          example: true
    StartModelResponse:
      type: object
      properties:
        id:
          type: string
          description: The identifier of the model that was started.
          example: model-zephyr-7B
        object:
          type: string
          description: Type of the object, indicating it's a model.
          default: model
        state:
          type: string
          description: The current state of the model after the start operation.
          example: running
      required:
        - id
        - object
        - state
    StopModelResponse:
      type: object
      properties:
        id:
          type: string
          description: The identifier of the model that was started.
          example: model-zephyr-7B
        object:
          type: string
          description: Type of the object, indicating it's a model.
          default: model
        state:
          type: string
          description: The current state of the model after the start operation.
          example: stopped
      required:
        - id
        - object
        - state
    ThreadObject:
      type: object
      properties:
        id:
          type: string
          description: |
            "The identifier of the thread, defaults to foldername."
          example: thread_....
        object:
          type: string
          description: |
            "Type of the object, defaults to thread."
          example: thread
        title:
          type: string
          description: >
            "A brief summary or description of the thread, defaults to an empty
            string."
          example: funny physics joke
        assistants:
          type: array
          description: ''
          items:
            properties:
              assistant_id:
                type: string
                description: |
                  The identifier of assistant, defaults to "jan"
                example: jan
              model:
                type: object
                properties:
                  id:
                    type: string
                    description: ''
                    example: ...
                  settings:
                    type: object
                    description: >
                      Defaults to and overrides assistant.json's "settings" (and
                      if none, then model.json "settings")
                  parameters:
                    type: object
                    description: >
                      Defaults to and overrides assistant.json's "parameters"
                      (and if none, then model.json "parameters")
        created:
          type: integer
          format: int64
          description: >
            "Unix timestamp representing the creation time of the thread,
            defaults to file creation time."
          example: 1231231
        metadata:
          type: object
          description: |
            "Metadata associated with the thread, defaults to an empty object."
          example: {}
    ThreadMessageObject:
      type: object
      properties:
        role:
          type: string
          description: |
            "Role of the sender, either 'user' or 'assistant'."
          enum:
            - user
            - assistant
        content:
          type: string
          description: |
            "Text content of the message."
        file_ids:
          type: array
          items:
            type: string
          description: |
            "Array of file IDs associated with the message, if any."
    CreateThreadResponse:
      type: object
      properties:
        id:
          type: string
          description: The identifier of the newly created thread.
          example: thread_abc123
        object:
          type: string
          description: Type of the object, indicating it's a thread.
          example: thread
        created_at:
          type: integer
          format: int64
          description: Unix timestamp representing the creation time of the thread.
          example: 1699014083
        metadata:
          type: object
          description: Metadata associated with the newly created thread.
          example: {}
    GetThreadResponse:
      type: object
      properties:
        id:
          type: string
          description: The identifier of the thread.
          example: thread_abc123
        object:
          type: string
          description: Type of the object
          example: thread
        created_at:
          type: integer
          format: int64
          description: Unix timestamp representing the creation time of the thread.
          example: 1699014083
        assistants:
          type: array
          items:
            type: string
          description: List of assistants involved in the thread.
          example:
            - assistant-001
        metadata:
          type: object
          description: Metadata associated with the thread.
          example: {}
        messages:
          type: array
          items:
            type: string
          description: List of messages within the thread.
          example: []
    ModifyThreadResponse:
      type: object
      properties:
        id:
          type: string
          description: |
            "The identifier of the modified thread."
          example: thread_abc123
        object:
          type: string
          description: Type of the object, indicating it's a thread.
          example: thread
        created_at:
          type: integer
          format: int64
          description: Unix timestamp representing the creation time of the thread.
          example: 1699014083
        metadata:
          type: object
          description: Metadata associated with the modified thread.
          example: {}
    DeleteThreadResponse:
      type: object
      properties:
        id:
          type: string
          description: The identifier of the deleted thread.
          example: thread_abc123
        object:
          type: string
          description: Type of the object, indicating the thread has been deleted.
          example: thread.deleted
        deleted:
          type: boolean
          description: Indicates whether the thread was successfully deleted.
          example: true
    ListMessageObject:
      type: object
      properties:
        id:
          type: string
          description: The identifier of the message.
          example: msg_abc123
        object:
          type: string
          description: Type of the object, indicating it's a thread message.
          example: thread.message
        created_at:
          type: integer
          format: int64
          description: Unix timestamp representing the creation time of the message.
          example: 1699017614
        thread_id:
          type: string
          description: Identifier of the thread to which this message belongs.
          example: thread_abc123
        role:
          type: string
          description: Role of the sender, either 'user' or 'assistant'.
          example: user
        content:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                description: Type of content, e.g., 'text'.
              text:
                type: object
                properties:
                  value:
                    type: string
                    description: Text content of the message.
                    example: How does AI work? Explain it in simple terms.
                  annotations:
                    type: array
                    items:
                      type: string
                    description: Annotations for the text content, if any.
        file_ids:
          type: array
          items:
            type: string
          description: Array of file IDs associated with the message, if any.
          example: []
        assistant_id:
          type: string
          description: Identifier of the assistant involved in the message, if applicable.
          example: null
        run_id:
          type: string
          description: Run ID associated with the message, if applicable.
          example: null
        metadata:
          type: object
          description: Metadata associated with the message.
          example: {}
    ListMessagesResponse:
      type: object
      properties:
        object:
          type: string
          description: Type of the object, indicating it's a list.
          default: list
        data:
          type: array
          items:
            $ref: '#/components/schemas/ListMessageObject'
        first_id:
          type: string
          description: Identifier of the first message in the list.
          example: msg_abc123
        last_id:
          type: string
          description: Identifier of the last message in the list.
          example: msg_abc456
        has_more:
          type: boolean
          description: Indicates whether there are more messages to retrieve.
          example: false
    CreateMessageResponse:
      type: object
      properties:
        id:
          type: string
          description: The identifier of the created message.
          example: msg_abc123
        object:
          type: string
          description: Type of the object, indicating it's a thread message.
          example: thread.message
        created_at:
          type: integer
          format: int64
          description: Unix timestamp representing the creation time of the message.
          example: 1699017614
        thread_id:
          type: string
          description: Identifier of the thread to which this message belongs.
          example: thread_abc123
        role:
          type: string
          description: Role of the sender, either 'user' or 'assistant'.
          example: user
        content:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                description: Type of content, e.g., 'text'.
                example: text
              text:
                type: object
                properties:
                  value:
                    type: string
                    description: Text content of the message.
                    example: How does AI work? Explain it in simple terms.
                  annotations:
                    type: array
                    items:
                      type: string
                    description: Annotations for the text content, if any.
                    example: []
        file_ids:
          type: array
          items:
            type: string
          description: Array of file IDs associated with the message, if any.
          example: []
        assistant_id:
          type: string
          description: Identifier of the assistant involved in the message, if applicable.
          example: null
        run_id:
          type: string
          description: Run ID associated with the message, if applicable.
          example: null
        metadata:
          type: object
          description: Metadata associated with the message.
          example: {}
    GetMessageResponse:
      type: object
      properties:
        id:
          type: string
          description: The identifier of the message.
          example: msg_abc123
        object:
          type: string
          description: Type of the object, indicating it's a thread message.
          default: thread.message
        created_at:
          type: integer
          format: int64
          description: Unix timestamp representing the creation time of the message.
          example: 1699017614
        thread_id:
          type: string
          description: Identifier of the thread to which this message belongs.
          example: thread_abc123
        role:
          type: string
          description: Role of the sender, either 'user' or 'assistant'.
          example: user
        content:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                description: Type of content, e.g., 'text'.
                example: text
              text:
                type: object
                properties:
                  value:
                    type: string
                    description: Text content of the message.
                    example: How does AI work? Explain it in simple terms.
                  annotations:
                    type: array
                    items:
                      type: string
                    description: Annotations for the text content, if any.
                    example: []
        file_ids:
          type: array
          items:
            type: string
          description: Array of file IDs associated with the message, if any.
          example: []
        assistant_id:
          type: string
          description: Identifier of the assistant involved in the message, if applicable.
          example: null
        run_id:
          type: string
          description: Run ID associated with the message, if applicable.
          example: null
        metadata:
          type: object
          description: Metadata associated with the message.
          example: {}
    MessageFileObject:
      type: object
      properties:
        id:
          type: string
          description: The identifier of the file.
          example: file-abc123
        object:
          type: string
          description: Type of the object, indicating it's a thread message file.
          example: thread.message.file
        created_at:
          type: integer
          format: int64
          description: Unix timestamp representing the creation time of the file.
          example: 1699061776
        message_id:
          type: string
          description: Identifier of the message to which this file is associated.
          example: msg_abc123
    ListMessageFilesResponse:
      type: object
      properties:
        object:
          type: string
          description: Type of the object, indicating it's a list.
          default: list
        data:
          type: array
          items:
            $ref: '#/components/schemas/MessageFileObject'
    ModelObject:
      type: object
      properties:
        id:
          type: string
          description: |
            "The identifier of the model."
          example: zephyr-7b
        object:
          type: string
          description: |
            "The type of the object, indicating it's a model."
          default: model
        created:
          type: integer
          format: int64
          description: |
            "Unix timestamp representing the creation time of the model."
          example: '1253935178'
        owned_by:
          type: string
          description: |
            "The entity that owns the model."
          example: _
    MessageObject:
      type: object
      properties:
        id:
          type: string
          description: |
            "Sequential or UUID identifier of the message."
          example: 0
        object:
          type: string
          description: |
            "Type of the object, defaults to 'thread.message'."
          example: thread.message
        created_at:
          type: integer
          format: int64
          description: |
            "Unix timestamp representing the creation time of the message."
        thread_id:
          type: string
          description: >
            "Identifier of the thread to which this message belongs. Defaults to
            parent thread."
          example: thread_asdf
        assistant_id:
          type: string
          description: >
            "Identifier of the assistant involved in the message. Defaults to
            parent thread."
          example: jan
        role:
          type: string
          enum:
            - user
            - assistant
          description: |
            "Role of the sender, either 'user' or 'assistant'."
        content:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                description: |
                  "Type of content, e.g., 'text'."
              text:
                type: object
                properties:
                  value:
                    type: string
                    description: |
                      "Text content of the message."
                    example: Hi!?
                  annotations:
                    type: array
                    items:
                      type: string
                    description: |
                      "Annotations for the text content, if any."
                    example: []
        metadata:
          type: object
          description: |
            "Metadata associated with the message, defaults to an empty object."
          example: {}
